[{"/home/ahnhc/proj/crow/src/index.js":"1","/home/ahnhc/proj/crow/src/components/App.js":"2","/home/ahnhc/proj/crow/src/components/Router.js":"3","/home/ahnhc/proj/crow/src/routes/Auth.js":"4","/home/ahnhc/proj/crow/src/routes/Home.js":"5","/home/ahnhc/proj/crow/src/firebaseSetup.js":"6","/home/ahnhc/proj/crow/src/components/Navigation.js":"7","/home/ahnhc/proj/crow/src/routes/Profile.js":"8","/home/ahnhc/proj/crow/src/constants.js":"9","/home/ahnhc/proj/crow/src/components/Crow.js":"10","/home/ahnhc/proj/crow/src/components/CrowFactory.js":"11","/home/ahnhc/proj/crow/src/components/Auth/AuthForm.js":"12","/home/ahnhc/proj/crow/src/components/LoadSpinner.js":"13","/home/ahnhc/proj/crow/src/entities/Button/LoadingButton.js":"14"},{"size":205,"mtime":1606456554321,"results":"15","hashOfConfig":"16"},{"size":1532,"mtime":1606473587389,"results":"17","hashOfConfig":"16"},{"size":1047,"mtime":1606464589267,"results":"18","hashOfConfig":"16"},{"size":2551,"mtime":1606474253227,"results":"19","hashOfConfig":"16"},{"size":843,"mtime":1606473364677,"results":"20","hashOfConfig":"16"},{"size":716,"mtime":1606397936253,"results":"21","hashOfConfig":"16"},{"size":360,"mtime":1606401288381,"results":"22","hashOfConfig":"16"},{"size":1468,"mtime":1606473441665,"results":"23","hashOfConfig":"16"},{"size":33,"mtime":1606389320364,"results":"24","hashOfConfig":"16"},{"size":1862,"mtime":1606399330501,"results":"25","hashOfConfig":"16"},{"size":1795,"mtime":1606403057723,"results":"26","hashOfConfig":"16"},{"size":3711,"mtime":1606469344160,"results":"27","hashOfConfig":"16"},{"size":722,"mtime":1606466012016,"results":"28","hashOfConfig":"16"},{"size":774,"mtime":1606470291654,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1fi6rxb",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"32"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"32"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"32"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/ahnhc/proj/crow/src/index.js",[],["62","63"],"/home/ahnhc/proj/crow/src/components/App.js",[],"/home/ahnhc/proj/crow/src/components/Router.js",[],"/home/ahnhc/proj/crow/src/routes/Auth.js",["64"],"/home/ahnhc/proj/crow/src/routes/Home.js",[],"/home/ahnhc/proj/crow/src/firebaseSetup.js",[],"/home/ahnhc/proj/crow/src/components/Navigation.js",[],"/home/ahnhc/proj/crow/src/routes/Profile.js",["65","66","67"],"/home/ahnhc/proj/crow/src/constants.js",[],"/home/ahnhc/proj/crow/src/components/Crow.js",["68"],"import React, { useState } from 'react';\nimport { dbService, storageService } from 'firebaseSetup';\nimport { COLLECTION } from '../constants';\n\nconst Crow = ({ crowObject, isOwner }) => {\n  const userDoc = `${COLLECTION}/${crowObject.id}`;\n  const [isEditing, setIsEditing] = useState(false);\n  const [newCrow, setNewCrow] = useState(crowObject.text);\n\n  const toggleEditing = () => setIsEditing(prev => !prev);\n\n  const onDeleteClick = async () => {\n    const ok = window.confirm('삭제하시겠습니까악?');\n    if (ok) {\n      await dbService.doc(userDoc).delete();\n      await storageService.refFromURL(crowObject.imgUrl).delete();\n    }\n  };\n\n  const onEditChange = (event) => {\n    const { target : { value } } = event;\n    setNewCrow(value);\n  }\n\n  const onEditCancle = () => {\n    setIsEditing(false);\n    setNewCrow(crowObject.text);\n  }\n\n  const onSubmit = async (event) => {\n    event.preventDefault();\n    await dbService.doc(userDoc).update({\n      text: newCrow,\n    });\n    setIsEditing(false);\n  }\n\n  return (\n    <div>\n      { isEditing ? (\n        <>\n          <form onSubmit={onSubmit}>\n            <input\n              type=\"text\"\n              value={newCrow}\n              required\n              placeholder=\"글을 작성해라 까악~\"\n              onChange={onEditChange}\n            />\n            <button>수정</button>\n            <button type=\"button\" onClick={onEditCancle}>취소</button>\n          </form>\n        </>\n      ) : (\n        <>\n          <h4>{crowObject.text}</h4>\n          { crowObject.imgUrl &&\n            <img src={crowObject.imgUrl} width=\"50px\" height=\"50px\" />\n          }\n          { isOwner && <>\n            <button onClick={onDeleteClick}>Delete Crow</button>\n            <button onClick={toggleEditing}>Edit Crow</button>\n          </> }\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default Crow;","/home/ahnhc/proj/crow/src/components/CrowFactory.js",["69"],"import React, { useState } from 'react';\nimport { v4 as uuid } from 'uuid';\nimport { dbService, storageService } from 'firebaseSetup';\nimport { COLLECTION } from '../constants';\n\nconst CrowFactory = ({ userObject }) => {\n  const [crow, setCrow] = useState('');\n  const [base64, setBase64] = useState();\n\n  const onSubmit = async (event) => {\n    event.preventDefault();\n\n    let imgUrl = '';\n    if (base64) {\n      const fileRef = storageService.ref().child(`${userObject.uid}/${uuid()}`);\n      const res = await fileRef.putString(base64, 'data_url');\n      imgUrl = await res.ref.getDownloadURL();\n      onClearFile();\n    }\n\n    await dbService.collection(COLLECTION).add({\n      text: crow,\n      createdAt: Date.now(),\n      creatorId: userObject.uid,\n      ...imgUrl && { imgUrl },\n    });\n    setCrow('');\n  }\n\n  const onChange = (event) => {\n    const { target: { value } } = event;\n    setCrow(value);\n  };\n\n  const onFileCHange = (event) => {\n    const { target: { files } } = event;\n    const [file] = files;\n    const reader = new FileReader();\n    reader.onloadend = (loadEvent) => {\n      // finish file load\n      setBase64(loadEvent.currentTarget.result);\n    }\n    reader.readAsDataURL(file);\n  }\n\n  const onClearFile = () => setBase64(null);\n\n  return (\n    <form onSubmit={onSubmit}>\n      <input\n        type=\"text\"\n        placeholder=\"까악!\"\n        maxLength={120}\n        value={crow}\n        onChange={onChange}\n      />\n      <input type=\"file\" accept=\"image/*\" onChange={onFileCHange} />\n      <button>까악하기</button>\n      { base64 && (\n        <div>\n          <img src={base64} width=\"50px\" height=\"50px\" />\n          <button type=\"button\" onClick={onClearFile}>사진지우기</button>\n        </div>\n      )}\n    </form>\n  )\n}\n\nexport default CrowFactory;","/home/ahnhc/proj/crow/src/components/Auth/AuthForm.js",["70"],"import { authService } from 'firebaseSetup';\nimport React, { useState, useRef } from 'react';\nimport { Button, Form } from 'react-bootstrap';\nimport { CSSTransition } from 'react-transition-group';\nimport './AuthForm.scss';\nimport LoadingButton from 'entities/Button/LoadingButton';\n\nconst AuthForm = ({ newAccount, toggleSubmitting, isSubmitting }) => {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [recapPassword, setRecapPassword] = useState('');\n\n  const passwordRef = useRef(null);\n\n  const [error, setError] = useState(null);\n  const errorCss = 'error-alram';\n  const erorrRef = useRef(null);\n  const timeout = {\n    enter: 100,\n    exit: 100,\n  }\n\n  const errorText = (text = null) => {\n    setError(text);\n    if (text && erorrRef.current) {\n      erorrAnimationReload();\n    }\n  }\n\n  const erorrAnimationReload = () => {\n    const animationClass = erorrRef.current.classList;\n    animationClass.remove(`${errorCss}-enter-done`);\n    animationClass.add(`${errorCss}-enter-active`);\n    setTimeout(() => {\n      animationClass.remove(`${errorCss}-enter-active`);\n      animationClass.add(`${errorCss}-enter-done`);\n    }, timeout.enter)\n  }\n\n  const onChange = (event) => {\n    const { target : { name, value } } = event;\n    if (name === 'email') {\n      setEmail(value);\n    } else if (name === 'password') {\n      setPassword(value);\n    } else if (name === 'password2') {\n      setRecapPassword(value);\n    }\n  }\n\n  const onSubmit = async (event) => {\n    if (isSubmitting) return;\n    event.preventDefault();\n    toggleSubmitting(true);\n    try {\n      if (newAccount) {\n        // create account\n        if (password !== recapPassword) {\n          errorText(`비밀번호가 다르다 까악!`);\n          toggleSubmitting(false);\n          return;\n        }\n        await authService.createUserWithEmailAndPassword(email, password);\n      } else {\n        // login\n        await authService.signInWithEmailAndPassword(email, password);\n      }\n      errorText()\n    } catch (error) {\n      errorText(error.message);\n    }\n    toggleSubmitting(false);\n  }\n\n  return (<>\n    <Form\n      onSubmit={onSubmit}\n      className=\"login__auth-container\"\n    >\n      <Form.Control\n        name=\"email\"\n        type=\"text\"\n        className=\"auth-containter--input\"\n        placeholder=\"Email\"\n        required\n        value={email}\n        onChange={onChange} />\n      <Form.Control\n        name=\"password\"\n        type=\"password\"\n        className=\"auth-containter--input\"\n        placeholder=\"Password\"\n        required\n        value={password}\n        onChange={onChange} />\n      <CSSTransition\n        nodeRef={passwordRef}\n        in={newAccount}\n        timeout={200}\n        classNames=\"second-password\"\n        unmountOnExit\n      >\n        <Form.Control\n          ref={passwordRef}\n          name=\"password2\"\n          type=\"password\"\n          className=\"auth-containter--input\"\n          placeholder=\"Recap Password\"\n          required\n          value={recapPassword}\n          onChange={onChange} />\n      </CSSTransition>\n\n      <LoadingButton\n        type=\"submit\"\n        variant=\"\"\n        className=\"base-button auth-containter--submit\"\n        isLoading={isSubmitting}\n      >\n        {newAccount ? '유저 생성' : '로그인'}\n      </LoadingButton>\n\n      <CSSTransition\n        nodeRef={erorrRef}\n        in={Boolean(error)}\n        timeout={timeout}\n        classNames={errorCss}\n        mountOnEnter\n        unmountOnExit\n      >\n        <span\n          ref={erorrRef}\n          className=\"auth-container--text\"\n        >\n          { error }\n        </span>\n      </CSSTransition>\n    </Form>\n  </>);\n}\n\nexport default AuthForm;","/home/ahnhc/proj/crow/src/components/LoadSpinner.js",[],"/home/ahnhc/proj/crow/src/entities/Button/LoadingButton.js",[],{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","severity":1,"message":"76","line":21,"column":6,"nodeType":"77","endLine":21,"endColumn":20,"suggestions":"78"},{"ruleId":"79","severity":1,"message":"80","line":1,"column":23,"nodeType":"81","messageId":"82","endLine":1,"endColumn":32},{"ruleId":"79","severity":1,"message":"83","line":2,"column":17,"nodeType":"81","messageId":"82","endLine":2,"endColumn":26},{"ruleId":"79","severity":1,"message":"84","line":4,"column":10,"nodeType":"81","messageId":"82","endLine":4,"endColumn":20},{"ruleId":"85","severity":1,"message":"86","line":58,"column":13,"nodeType":"87","endLine":58,"endColumn":71},{"ruleId":"85","severity":1,"message":"86","line":61,"column":11,"nodeType":"87","endLine":61,"endColumn":58},{"ruleId":"79","severity":1,"message":"88","line":3,"column":10,"nodeType":"81","messageId":"82","endLine":3,"endColumn":16},"no-native-reassign",["89"],"no-negated-in-lhs",["90"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'newAccount'. Either include it or remove the dependency array.","ArrayExpression",["91"],"no-unused-vars","'dbService' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'COLLECTION' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Button' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"92","fix":"93"},"Update the dependencies array to be: [isSubmitting, newAccount]",{"range":"94","text":"95"},[720,734],"[isSubmitting, newAccount]"]