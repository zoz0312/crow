[{"/home/ahnhc/proj/crow/src/index.js":"1","/home/ahnhc/proj/crow/src/components/App.js":"2","/home/ahnhc/proj/crow/src/components/Router.js":"3","/home/ahnhc/proj/crow/src/routes/Auth.js":"4","/home/ahnhc/proj/crow/src/routes/Home.js":"5","/home/ahnhc/proj/crow/src/firebaseSetup.js":"6","/home/ahnhc/proj/crow/src/components/Navigation.js":"7","/home/ahnhc/proj/crow/src/routes/Profile.js":"8","/home/ahnhc/proj/crow/src/constants.js":"9","/home/ahnhc/proj/crow/src/components/Crow.js":"10","/home/ahnhc/proj/crow/src/components/CrowFactory.js":"11","/home/ahnhc/proj/crow/src/components/AuthForm.js":"12"},{"size":205,"mtime":1606381731649,"results":"13","hashOfConfig":"14"},{"size":1141,"mtime":1606405951296,"results":"15","hashOfConfig":"14"},{"size":1022,"mtime":1606403567893,"results":"16","hashOfConfig":"14"},{"size":819,"mtime":1606403347922,"results":"17","hashOfConfig":"14"},{"size":796,"mtime":1606402913024,"results":"18","hashOfConfig":"14"},{"size":716,"mtime":1606397936253,"results":"19","hashOfConfig":"14"},{"size":360,"mtime":1606401288381,"results":"20","hashOfConfig":"14"},{"size":1479,"mtime":1606403570877,"results":"21","hashOfConfig":"14"},{"size":33,"mtime":1606389320364,"results":"22","hashOfConfig":"14"},{"size":1862,"mtime":1606399330501,"results":"23","hashOfConfig":"14"},{"size":1795,"mtime":1606403057723,"results":"24","hashOfConfig":"14"},{"size":1929,"mtime":1606403349006,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1fi6rxb",{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"28"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"28"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"28"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},"/home/ahnhc/proj/crow/src/index.js",[],["57","58"],"/home/ahnhc/proj/crow/src/components/App.js",["59"],"import { useEffect, useMemo, useState } from 'react';\nimport AppRouter from 'components/Router';\nimport { authService } from 'firebaseSetup';\nimport { Container } from 'react-bootstrap';\nimport './App.scss'\n\nfunction App() {\n  const [init, setInit] = useState(false);\n  const [userObject, setUserObject] = useState(null);\n\n  useEffect(() => {\n    authService.onAuthStateChanged((user) => {\n      if (user) {\n        setUserObject({\n          uid: user.uid,\n          displayName: user.displayName,\n          updateProfile: (args) => user.updateProfile(args),\n        });\n      } else {\n        setUserObject(null);\n      }\n      setInit(true);\n    });\n  }, []);\n\n  const refreshUser = () => {\n    const user = authService.currentUser;\n    setUserObject({\n      uid: user.uid,\n      displayName: user.displayName,\n      updateProfile: (args) => user.updateProfile(args),\n    });\n  }\n\n  return (\n    <Container>\n      { init ?\n        <AppRouter\n          isLoggedIn={Boolean(userObject)}\n          userObject={userObject}\n          refreshUser={refreshUser}\n        />\n      : '동기화중...' }\n    </Container>\n  );\n}\n\nexport default App;\n","/home/ahnhc/proj/crow/src/components/Router.js",[],"/home/ahnhc/proj/crow/src/routes/Auth.js",["60","61"],"import AuthForm from 'components/AuthForm';\nimport { authService, firebaseInstance } from 'firebaseSetup';\nimport React, { useState } from 'react';\n\nconst Auth = () => {\n\n  const onSocialClick = async (evnet) => {\n    const { target: { name } } = evnet;\n    let provider;\n\n    if (name === 'google') {\n      provider = new firebaseInstance.auth.GoogleAuthProvider();\n    } else if (name === 'github') {\n      provider = new firebaseInstance.auth.GithubAuthProvider();\n    }\n    const data = await authService.signInWithPopup(provider);\n  }\n\n  return (\n    <div>\n      <AuthForm />\n      <div>\n        <button onClick={onSocialClick} name=\"google\">구글로 계속하기</button>\n        <button onClick={onSocialClick} name=\"github\">깃허브로 계속하기</button>\n      </div>\n    </div>\n  )\n}\n\nexport default Auth;","/home/ahnhc/proj/crow/src/routes/Home.js",[],"/home/ahnhc/proj/crow/src/firebaseSetup.js",[],"/home/ahnhc/proj/crow/src/components/Navigation.js",[],"/home/ahnhc/proj/crow/src/routes/Profile.js",["62"],"import { authService, dbService } from 'firebaseSetup';\nimport React, { useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { COLLECTION } from '../constants';\n\nconst Profile = ({ userObject, refreshUser }) => {\n  const history = useHistory();\n  const [userName, setUserName] = useState(userObject.displayName);\n\n  const onLogoutClick = () => {\n    authService.signOut();\n    history.push('/');\n  }\n\n  const getMyProfile = async () => {\n    const crows = await dbService\n      .collection(COLLECTION)\n      .where('creatorId', '==', userObject.uid)\n      // .orderBy('createdAt')\n      .get();\n\n    const data = crows.docs.map(doc => doc.data());\n    console.log('data', data);\n  };\n\n  const onChange = (event) => {\n    const { target : { value } } = event;\n    setUserName(value);\n  }\n\n  const onSubmit = async (event) => {\n    event.preventDefault();\n    if (userObject.displayName !== userName) {\n      // TODO: user image set\n      await userObject.updateProfile({\n        displayName: userName,\n      });\n      refreshUser();\n    }\n  }\n\n  useEffect(() => {\n    getMyProfile();\n  }, []);\n\n  return (\n    <>\n      <form onSubmit={onSubmit}>\n        <input\n          type=\"text\"\n          placeholder=\"Display name\"\n          value={userName}\n          onChange={onChange}\n        />\n        <button>내 정보 업데이트</button>\n      </form>\n      <button onClick={onLogoutClick}>Logout</button>\n    </>\n  )\n}\n\nexport default Profile;","/home/ahnhc/proj/crow/src/constants.js",[],"/home/ahnhc/proj/crow/src/components/Crow.js",["63"],"import React, { useState } from 'react';\nimport { dbService, storageService } from 'firebaseSetup';\nimport { COLLECTION } from '../constants';\n\nconst Crow = ({ crowObject, isOwner }) => {\n  const userDoc = `${COLLECTION}/${crowObject.id}`;\n  const [isEditing, setIsEditing] = useState(false);\n  const [newCrow, setNewCrow] = useState(crowObject.text);\n\n  const toggleEditing = () => setIsEditing(prev => !prev);\n\n  const onDeleteClick = async () => {\n    const ok = window.confirm('삭제하시겠습니까악?');\n    if (ok) {\n      await dbService.doc(userDoc).delete();\n      await storageService.refFromURL(crowObject.imgUrl).delete();\n    }\n  };\n\n  const onEditChange = (event) => {\n    const { target : { value } } = event;\n    setNewCrow(value);\n  }\n\n  const onEditCancle = () => {\n    setIsEditing(false);\n    setNewCrow(crowObject.text);\n  }\n\n  const onSubmit = async (event) => {\n    event.preventDefault();\n    await dbService.doc(userDoc).update({\n      text: newCrow,\n    });\n    setIsEditing(false);\n  }\n\n  return (\n    <div>\n      { isEditing ? (\n        <>\n          <form onSubmit={onSubmit}>\n            <input\n              type=\"text\"\n              value={newCrow}\n              required\n              placeholder=\"글을 작성해라 까악~\"\n              onChange={onEditChange}\n            />\n            <button>수정</button>\n            <button type=\"button\" onClick={onEditCancle}>취소</button>\n          </form>\n        </>\n      ) : (\n        <>\n          <h4>{crowObject.text}</h4>\n          { crowObject.imgUrl &&\n            <img src={crowObject.imgUrl} width=\"50px\" height=\"50px\" />\n          }\n          { isOwner && <>\n            <button onClick={onDeleteClick}>Delete Crow</button>\n            <button onClick={toggleEditing}>Edit Crow</button>\n          </> }\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default Crow;","/home/ahnhc/proj/crow/src/components/CrowFactory.js",["64"],"import React, { useState } from 'react';\nimport { v4 as uuid } from 'uuid';\nimport { dbService, storageService } from 'firebaseSetup';\nimport { COLLECTION } from '../constants';\n\nconst CrowFactory = ({ userObject }) => {\n  const [crow, setCrow] = useState('');\n  const [base64, setBase64] = useState();\n\n  const onSubmit = async (event) => {\n    event.preventDefault();\n\n    let imgUrl = '';\n    if (base64) {\n      const fileRef = storageService.ref().child(`${userObject.uid}/${uuid()}`);\n      const res = await fileRef.putString(base64, 'data_url');\n      imgUrl = await res.ref.getDownloadURL();\n      onClearFile();\n    }\n\n    await dbService.collection(COLLECTION).add({\n      text: crow,\n      createdAt: Date.now(),\n      creatorId: userObject.uid,\n      ...imgUrl && { imgUrl },\n    });\n    setCrow('');\n  }\n\n  const onChange = (event) => {\n    const { target: { value } } = event;\n    setCrow(value);\n  };\n\n  const onFileCHange = (event) => {\n    const { target: { files } } = event;\n    const [file] = files;\n    const reader = new FileReader();\n    reader.onloadend = (loadEvent) => {\n      // finish file load\n      setBase64(loadEvent.currentTarget.result);\n    }\n    reader.readAsDataURL(file);\n  }\n\n  const onClearFile = () => setBase64(null);\n\n  return (\n    <form onSubmit={onSubmit}>\n      <input\n        type=\"text\"\n        placeholder=\"까악!\"\n        maxLength={120}\n        value={crow}\n        onChange={onChange}\n      />\n      <input type=\"file\" accept=\"image/*\" onChange={onFileCHange} />\n      <button>까악하기</button>\n      { base64 && (\n        <div>\n          <img src={base64} width=\"50px\" height=\"50px\" />\n          <button type=\"button\" onClick={onClearFile}>사진지우기</button>\n        </div>\n      )}\n    </form>\n  )\n}\n\nexport default CrowFactory;","/home/ahnhc/proj/crow/src/components/AuthForm.js",["65"],"import { authService } from 'firebaseSetup';\nimport React, { useState } from 'react';\n\nconst AuthForm = () => {\n  const [newAccount, setNewAccount] = useState(true);\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [recapPassword, setRecapPassword] = useState('');\n  const [error, setError] = useState(null);\n\n  const toggleAccount = () => setNewAccount((prev) => !prev);\n\n  const onChange = (event) => {\n    const { target : { name, value } } = event;\n    if (name === 'email') {\n      setEmail(value);\n    } else if (name === 'password') {\n      setPassword(value);\n    } else if (name === 'password2') {\n      setRecapPassword(value);\n    }\n  }\n\n  const onSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      let data;\n      if (newAccount) {\n        // create account\n        data = await authService.createUserWithEmailAndPassword(email, password);\n      } else {\n        // login\n        data = await authService.signInWithEmailAndPassword(email, password);\n      }\n    } catch (error) {\n      setError(error.message);\n    }\n  }\n\n  return (<>\n    <form onSubmit={onSubmit}>\n      <input\n        name=\"email\"\n        type=\"text\"\n        placeholder=\"Email\"\n        required\n        value={email}\n        onChange={onChange} />\n      <input\n        name=\"password\"\n        type=\"password\"\n        placeholder=\"Password\"\n        required\n        value={password}\n        onChange={onChange} />\n      { newAccount &&\n        <input\n          name=\"password2\"\n          type=\"password\"\n          placeholder=\"Recap Password\"\n          required\n          value={recapPassword}\n          onChange={onChange} />\n      }\n      { error }\n      <input type=\"submit\" value={newAccount ? '유저 생성하기' : '로그인'} />\n    </form>\n    <span onClick={toggleAccount}>{newAccount ? '로그인' : '유저 생성하기' }</span>\n  </>);\n}\n\nexport default AuthForm;",{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","severity":1,"message":"71","line":1,"column":21,"nodeType":"72","messageId":"73","endLine":1,"endColumn":28},{"ruleId":"70","severity":1,"message":"74","line":3,"column":17,"nodeType":"72","messageId":"73","endLine":3,"endColumn":25},{"ruleId":"70","severity":1,"message":"75","line":16,"column":11,"nodeType":"72","messageId":"73","endLine":16,"endColumn":15},{"ruleId":"76","severity":1,"message":"77","line":44,"column":6,"nodeType":"78","endLine":44,"endColumn":8,"suggestions":"79"},{"ruleId":"80","severity":1,"message":"81","line":58,"column":13,"nodeType":"82","endLine":58,"endColumn":71},{"ruleId":"80","severity":1,"message":"81","line":61,"column":11,"nodeType":"82","endLine":61,"endColumn":58},{"ruleId":"70","severity":1,"message":"75","line":33,"column":9,"nodeType":"72","messageId":"73","endLine":33,"endColumn":13},"no-native-reassign",["83"],"no-negated-in-lhs",["84"],"no-unused-vars","'useMemo' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'data' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getMyProfile'. Either include it or remove the dependency array.","ArrayExpression",["85"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"86","fix":"87"},"Update the dependencies array to be: [getMyProfile]",{"range":"88","text":"89"},[1125,1127],"[getMyProfile]"]